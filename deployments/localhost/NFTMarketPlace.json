{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTMarketPlace__NFTAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketPlace__NFTNotApprovedForMarketPlace",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketPlace__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTMarketPlace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketPlace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketPlace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NFTMarketPlace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketPlace__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListing",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BuyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ListItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFTContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "PriceNFT",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NFTMarketPlace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x05b5083a14e90fec22a430a77031b36636f601f05650509dfbc0a7c54683034a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1372284",
    "logsBloom": "0x
    "blockHash": "0x086e4dea8f0612c1e31cd5fddbe7a78909f49149048d7cb917beda65d633bc4c",
    "transactionHash": "0x05b5083a14e90fec22a430a77031b36636f601f05650509dfbc0a7c54683034a",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1372284",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac1847b2d8de4dc1452b96ad6eace11e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMarketPlace__NFTAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketPlace__NFTNotApprovedForMarketPlace\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketPlace__NoProceeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMarketPlace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketPlace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketPlace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTMarketPlace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketPlace__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListing\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BuyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"PriceNFT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NFTMarketPlace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"BuyItem(address,uint256)\":{\"params\":{\"NFTContractAddress\":\"Address of NFT contract\",\"tokenId\":\"Token ID of NFT\"}},\"ListItem(address,uint256,uint256)\":{\"details\":\"We could have an escrow contract but I choose this way bcoz the people could still be holding their nfts until bought by the buyer \",\"params\":{\"NFTContractAddress\":\"address of the NFT Contract\",\"price\":\"the sale price of the NFT to be listed\",\"tokenId\":\"the tokenId of the NFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BuyItem(address,uint256)\":{\"notice\":\"Method for buying listingThe owner of an NFT could unapprove the marketplace, which would cause this function to fail Ideally you'd also have a `createOffer` functionality.\"},\"ListItem(address,uint256,uint256)\":{\"notice\":\"A function to list the NFTs\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketPlace.sol\":\"NFTMarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror NFTMarketPlace__PriceMustBeAboveZero();\\nerror NFTMarketPlace__NFTNotApprovedForMarketPlace();\\nerror NFTMarketPlace__NFTAlreadyMinted(address NFTContractAddress,uint256 TokenId);\\nerror NFTMarketPlace__NotOwner();\\nerror NFTMarketPlace__NotListed(address NFTContractAddress,uint256 tokenId);\\nerror NFTMarketPlace__PriceNotMet(address NFTContractAddress,uint256 tokenId,uint256 price);\\nerror NFTMarketPlace__NoProceeds();\\nerror NFTMarketPlace__TransferFailed();\\n\\ncontract NFTMarketPlace is ReentrancyGuard{\\n\\n    struct Listing {\\n        uint256 PriceNFT;\\n        address seller;\\n    }\\n\\n    // events ---------->\\n    event ItemListing(address indexed seller,address indexed NFTContractAddress,uint256 tokenId,uint256 price);\\n\\n    event ItemBought(address indexed buyer,address indexed NFTContractAddress,uint256 indexed tokenId,uint256 price);\\n\\n    event ItemCancelled(address indexed seller, address indexed NFTContractAddress, uint256 indexed tokenId);\\n    \\n    //STATE VARIABLES -------->\\n\\n    // NFT contract address -> TokenId -> Listing Info \\n    mapping(address => mapping(uint256 => Listing)) private s_Listings;\\n\\n    // Seller address to amount earned\\n    mapping(address => uint256) private s_proceeds;\\n\\n    // MODIFIERS ---------->\\n    modifier notListed(address NFTContractAddress, uint256 TokenId, address owner) {\\n        Listing memory listed = s_Listings[NFTContractAddress][TokenId];\\n\\n        if (listed.PriceNFT > 0) {\\n            revert NFTMarketPlace__NFTAlreadyMinted(NFTContractAddress,TokenId);\\n        } \\n        _;\\n    }\\n\\n    modifier isOwner(address NFTContractAddress,uint256 tokenId, address spender) {\\n        IERC721 nft = IERC721(NFTContractAddress);\\n        address owner = nft.ownerOf(tokenId);\\n\\n        if (spender != owner) {\\n            revert NFTMarketPlace__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier isListed(address NFTContractAddress, uint256 tokenId) {\\n        Listing memory listing = s_Listings[NFTContractAddress][tokenId];\\n        if (listing.PriceNFT <= 0) {\\n            revert NFTMarketPlace__NotListed(NFTContractAddress,tokenId);\\n        }\\n        _;\\n    }\\n\\n\\n    // MAIN FUNCTIONS  -------------------->\\n\\n    /**\\n     * @notice A function to list the NFTs\\n     * @param NFTContractAddress address of the NFT Contract\\n     * @param tokenId the tokenId of the NFT\\n     * @param price the sale price of the NFT to be listed\\n     * @dev We could have an escrow contract but I choose this way bcoz the people could still\\n     * be holding their nfts until bought by the buyer \\n     */ \\n    function ListItem(address NFTContractAddress, uint256 tokenId, uint256 price) external \\n    notListed(NFTContractAddress, tokenId, msg.sender) \\n    isOwner(NFTContractAddress,tokenId,msg.sender) {\\n        if (price <= 0) {\\n            revert NFTMarketPlace__PriceMustBeAboveZero();\\n        }\\n        // Owners can still hold their nfts, while giving the marketplace the approval to sell the NFT\\n\\n        IERC721 nft = IERC721(NFTContractAddress);\\n\\n        if (nft.getApproved(tokenId) != address(this)) {\\n            revert NFTMarketPlace__NFTNotApprovedForMarketPlace();\\n        }\\n\\n        s_Listings[NFTContractAddress][tokenId] = Listing(price,msg.sender);\\n\\n        emit ItemListing(msg.sender,NFTContractAddress,tokenId,price);\\n    }\\n\\n    /** \\n     * @notice Method for buying listing\\n     * @notice The owner of an NFT could unapprove the marketplace,\\n     * which would cause this function to fail\\n     * Ideally you'd also have a `createOffer` functionality.\\n     * @param NFTContractAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     */\\n    function BuyItem(address NFTContractAddress,uint256 tokenId) \\n    isListed(NFTContractAddress, tokenId) \\n    nonReentrant external payable{\\n        Listing memory listingItem = s_Listings[NFTContractAddress][tokenId];\\n\\n        if (msg.value < listingItem.PriceNFT) {\\n            revert NFTMarketPlace__PriceNotMet(NFTContractAddress,tokenId,listingItem.PriceNFT);\\n        }\\n\\n        // unchecked {\\n            s_proceeds[listingItem.seller] += msg.value;\\n        // }\\n\\n        delete (s_Listings[NFTContractAddress][tokenId]);\\n\\n        /*\\n         * To prevent Re-entrancy its always better to make external contract calls or tranfer \\n           funds at the end of the functions so even if the external contract is malicious it \\n           cannot attack bcoz the state has already been changed \\n         * Using the openzeppelin Re-entrancy Guard   \\n        */\\n\\n        IERC721(NFTContractAddress).safeTransferFrom(listingItem.seller, msg.sender, tokenId, \\\"\\\");\\n    \\n        emit ItemBought(msg.sender,NFTContractAddress,tokenId,listingItem.PriceNFT);\\n    }\\n\\n     /* \\n     * @notice Method for cancelling listing\\n     * @param nftAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     */\\n    function CancelListing(address NFTContractAddress,uint256 tokenId) \\n    isOwner(NFTContractAddress, tokenId, msg.sender) \\n    isListed(NFTContractAddress, tokenId) external {\\n        delete (s_Listings[NFTContractAddress][tokenId]);\\n\\n        emit ItemCancelled(msg.sender,NFTContractAddress, tokenId);\\n    }\\n\\n    /*\\n     * @notice Method for updating listing\\n     * @param NFTContractAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     * @param newPrice Price in Wei of the item\\n     */\\n    function UpdateListing(address NFTContractAddress, uint256 tokenId, uint256 newPrice) \\n    isListed(NFTContractAddress, tokenId)  \\n    isOwner(NFTContractAddress,tokenId,msg.sender) external {\\n        s_Listings[NFTContractAddress][tokenId].PriceNFT = newPrice;\\n\\n        emit ItemListing(msg.sender, NFTContractAddress, tokenId, newPrice);\\n    } \\n\\n\\n    /*\\n     * @notice Method for withdrawing proceeds from sales\\n     */\\n    function Withdraw() external {\\n        uint256 balance = s_proceeds[msg.sender];\\n\\n        if (balance <= 0) {\\n            revert  NFTMarketPlace__NoProceeds();\\n        }\\n\\n        s_proceeds[msg.sender] = 0;\\n\\n        (bool success, ) = msg.sender.call{value : balance}(\\\"\\\");\\n        if (!success) {\\n            revert NFTMarketPlace__TransferFailed();\\n        }\\n    }\\n\\n\\n    // GETTER FUNCTIONS -------------------->\\n    function getListing(address NFTContractAddress, uint256 tokenId) external view returns(Listing memory) {\\n        return s_Listings[NFTContractAddress][tokenId];\\n    }\\n\\n    function getProceeds(address seller) external view returns(uint256) {\\n        return s_proceeds[seller];\\n    }\\n}\",\"keccak256\":\"0x32093cf79e3a3e323dde2e2d7d28f153fb5ac7b11a0769a9329cf934f4eacf59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "BuyItem(address,uint256)": {
        "params": {
          "NFTContractAddress": "Address of NFT contract",
          "tokenId": "Token ID of NFT"
        }
      },
      "ListItem(address,uint256,uint256)": {
        "details": "We could have an escrow contract but I choose this way bcoz the people could still be holding their nfts until bought by the buyer ",
        "params": {
          "NFTContractAddress": "address of the NFT Contract",
          "price": "the sale price of the NFT to be listed",
          "tokenId": "the tokenId of the NFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BuyItem(address,uint256)": {
        "notice": "Method for buying listingThe owner of an NFT could unapprove the marketplace, which would cause this function to fail Ideally you'd also have a `createOffer` functionality."
      },
      "ListItem(address,uint256,uint256)": {
        "notice": "A function to list the NFTs"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2816,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "s_Listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2781_storage))"
      },
      {
        "astId": 2820,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2781_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTMarketPlace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2781_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2781_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketPlace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2781_storage"
      },
      "t_struct(Listing)2781_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketPlace.Listing",
        "members": [
          {
            "astId": 2778,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "PriceNFT",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2780,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}